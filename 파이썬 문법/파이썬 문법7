# 표준입출력
print("python","java","javascript") # 결과값 python java javascript
print("python","java","javascript", sep= " vs " , end= "?") #결과값 python vs java vs javascript
print (" 무엇이 더 재미있을까요?") #end포함 결과값 python vs java vs javascript? 무엇이 더 재미있을까요?

import sys
print("python", "java", file=sys.stdout) #stdout는 표준 출력으로 찍히는거
print("python", "java", file=sys.stderr) #표준 에로로 찍히는거 , 이게 뭔말이냐 우리가 로그 처리할때 

scores = {"수학":0, "영어":50, "코딩":100} #키와 벨류값으로 
for subject, score in scores.items():#이때 items쓰면 key와value둘다 보내줌 즉 변수인 subject와 score에 튜플로 보내줌
    print(subject,score) 

#위의 결과값
# 수학 0
# 영어 50
# 코딩 100

#우리가 근데 문자나 숫자칸을 정렬해서 맞춰고싶다
scores2 = {"수학":0, "영어":50, "코딩":100} #키와 벨류값으로 
for subject, score in scores2.items():#이때 items쓰면 key와value둘다 보내줌 즉 변수인 subject와 score에 튜플로 보내줌
    print(subject.ljust(8),str(score).rjust(4), sep=" : ") #subject는 왼쪽정렬을 하되 8칸을 확보해서, score는 일단 문자로 바꾸기 위해 str후 4칸확보 오른쪽정렬
#sep은 , 자리에 : 가 들어간격
#결과값
# 수학       :    0
# 영어       :   50
# 코딩       :  100

#은행의 대기 순번표
#001,002,003...
for num in range(1, 3): # 1부터 20까지
    print("대기번호 :" + str(num).zfill(3)) #3개만큼크기 공간확보해서 값없는 빈공간은 0으로 채워달라 이게 zfill
#결과값
# 대기번호 :001
# 대기번호 :002

#표준입력
# answer = input("아무 값이나 입력하세요 :") #상대방이 여기다 뭘치면  항상 문자열형태로 변수에 들감(숫자도)

#다양한 출력 포멧
#빈 자리는 빈공간으로 두고, 오른쪽 정렬을 하되, 총 10자리 공간을 확보
print("{0: >10}".format(500)) #   >10(앞에 한칸 띄운게 빈공간은 가만히 둔다는 뜻), >는 오른쪽 정렬 10은 10칸 확보
# 결과값        500

#양수일땐 +표시, 음수일땐 -로 표시 
print("{0: >+10}".format(500)) # +붙임으로서 양수이건 음수이건 +,-가 찍힌다. 양수일때 + 음수일때  - 
print("{0: >+10}".format(-500))

#결과값
    #   +500
    #   -500

# 왼쪽 정렬하고, 빈칸으로 _로 채움
print("{0:_<+10}".format(500)) #결과값 +500______
#3자리 마다 콤마를 찍어주기
print("{0:,}".format(100000000000000)) #결과값 100,000,000,000,000
#3자리 마다 콤마 찍어주는데 부호도 붙이기
print("{0:+,}".format(-100000000000000))
#3자리 마다 콤마 찍어주는데 부호도 붙이기, 자리수 확보하면서 돈많으면 행복하니까 빈자리는 ^^로 채우기
print("{0:^<+30,}".format(1000000000000)) #결과값 +1,000,000,000,000^^^^^^^^^^^^
#처음 ^는 빈자리를 ^로 채운다 두번째 <는 왼쪽정렬 +는 부호 붙이는거 30은 자리 확보 ,는 세번쨰마다 , 찍어주는거
#소수점 출력
print("{0:f}".format(5/3)) #결과값 1.666667
#소수점 특정 자리수 까지만 표시하고 싶어
print("{0:.2f}".format(5/3)) #소수점 둘쨰 자리까지 보여짐 즉 3번쨰에서 반올림 해줘 결과값 1.67

#파일 입출력
# score_file = open("score.txt","w", encoding="utf8") # score_file 파일 열기 처음엔 파일이름 두번쨰 w라는 쓰기위한 목적 마지막 encoding=utf8 이거 안해주면 한글썼을때 이상해짐
# print("수학 : 0", file=score_file) # 이 프린트를 어디에 해줄건지 즉 file= 이거 쓰는거 주의
# print("영어 : 100", file=score_file)
# score_file.close() 
#이걸 돌리면 옆에 score.txt파일이 생기고 print문이 그짝에 찍혀있다.

# score_file = open("score.txt","a", encoding="utf8") # score_file 파일 열기, 처음엔 파일이름 두번쨰 a라는 내용 존재 파일에 계속 이어서 쓰는 목적 마지막 encoding=utf8 이거 안해주면 한글썼을때 이상해짐
# score_file.write("과학: 80") #위의 print와 같은 내용을 이렇게 write로 바로
# score_file.write("\n코딩 : 100") #근데 얜 줄바꿈이 없다. 해서 따로 해주기
# score_file.close()

#파일 읽어오기
# score_file = open("score.txt","r", encoding="utf8")  #r은 read로 파일 읽어온다
# print(score_file.read()) #파일에 있는 모든 내용 읽어와서 찍어줌
# score_file.close()
#한줄한줄 불러오기
# score_file = open("score.txt","r", encoding="utf8")  #r은 read로 파일 읽어온다
# print(score_file.readline()) #파일에 있는 한줄만 읽어와서 찍어줌 커서는 아래쪽으로 이동
# print(score_file.readline())
# print(score_file.readline())
# print(score_file.readline())
# score_file.close()

#몇줄인지 모를때
# score_file = open("score.txt","r", encoding="utf8")
# while True:
#     line = score_file.readline()
#     if not line:
#         break
#     print(line)
# score_file.close()    

# 결과값
# 수학 : 0

# 영어 : 100

# 과학: 80

# 코딩 : 100

#마지막 방법
score_file = open("score.txt","r", encoding="utf8")
lines = score_file.readlines() #이러면 모든 라인 가져와서 list형태로 저장
for line in lines:
    print(line)
score_file.close()

#pickle 이건 프로그램 사용 데이터를 파일형태로 저장을 해주는거 그러면 파일을 누군가 한테 주면 pickle이용해 안에있는 데이터가져와서 코드에서 또 쓸수있다.
import pickle
# profile_file = open("profile.pickle", "wb") #위와 똑같은데 이번엔 피클을 쓰려면 b도(바이너리)타입을 정의해줘야된다. 여기선 encoding 필요 ㄴ
# profile = {"이름": "박명수", "나이":30, "취미": ["축구", "골프", "코딩"]}
# print(profile)
# pickle.dump(profile, profile_file) #이렇게 하면 profile에 있는 정보를 file에 저장
# profile_file.close()

#이번엔 읽기
profile_file = open("profile.pickle", "rb")
profile = pickle.load(profile_file) #파일에 있는 내용가져와서 데이터 형태로 불러와줌 ( 어떤 파일 )
print(profile)
profile_file.close()

#with
import pickle

with open("profile.pickle", "rb") as profile_file: #이거 뜻은 우선 profile.pickle이 파일을열어 profile_file여기 변수에 저장해두고
    print(pickle.load(profile_file)) #파일 내용을 pickle.load통해서 풀러와서(profile_file의 내용을) 출력해줌
    # 여기선 close() 안해줘도 된다.

#pickle 사용하지 않고 일반적인 파일을 with로 사용하는것
with open("study.txt", "w", encoding="utf8") as study_file:
    study_file.write("파이썬을 열심히 공부하고 있어요")
#이번에 위 파일 읽어오기
with open("study.txt", "r", encoding="utf8") as study_file:
    print(study_file.read()) 
