##예외처리
try:
    print("나누기 전용 계산기입니다.")
    nums = []
    nums.append(int(input("첫 번째 숫자를 입력하세요 :")))
    nums.append(int(input("두 번째 숫자를 입력하세요 :")))
    # nums.append(int(nums[0] / nums[1])) #이게 배열 nums[2]로 들어가는거
    print("{0} / {1} = {2}".format(nums[0],nums[1],nums[2]))
    #여기서 입력을 숫자대신 문자로하면 예외가 생긴다 그럴때 예외처리를 해보자
except ValueError:   #위에거 돌렸을때 터미널에 ValueError라고 뜨면서 에러났음
    print("에러! 잘못된 값을 입력하셨습니다.")
except ZeroDivisionError as err:
    print(err) #이러면 걍 에러메시지에 나온게 뜨는거
except: #만약 리스트에 num[2]안넣을때 에러 처리 걍 except라고 만해주면 여기꺼 씀
    # 만약 어떤 내용인지 알고 싶으면  except Exception as err: 라고 하고 print(err)써주면됨
    print("알 수 없는 에러가 발생하였습니다.")

#try에서 코드가 돌다가 잘못되면 밑에 except부분을 찾는다. 찾아서 try쪽에서 어느 부분이 잘못된지에 걸맞는 부분에 내가 쓴 코드 띄워줌
#결과값
# 첫 번째 숫자를 입력하세요 :1651
# 두 번째 숫자를 입력하세요 :dkek
# 에러! 잘못된 값을 입력하셨습니다.

#이번엔 0으로 나눠서 또다른 에러 처리를 해보자 ZeroDivisionError: division by zero 이렇게 뜬다 0을 넣주면

class BigNumberError(Exception):  #우리가 예외를 정의한거
    def __init__(self,msg):
        self.msg = msg

    def __str__(self):
        return self.msg
    # 순서2.메시지 받으면 가지고 있다가

##의도적으로 에러 발생시키기
try:
    print("한 자리 숫자 나누기 전용 계산기 입니다.")
    num1 = (int(input("첫 번째 숫자를 입력하세요 :")))
    num2 = (int(input("두 번째 숫자를 입력하세요 :")))
    if num1 >= 10 or num2 >= 10:
        raise BigNumberError("입력값 : {0}, {1}".format(num1, num2))  # 에러 발생시키기 except로 간다.
         #순서1.()안의 메시지를 BigNumberError 보내주면 
    print("{0} / {1} = {2}".format(num1,num2, int(num1 / num2)))
except ValueError:
    print("잘못된 값을 입력 하였습니다. 한자리 값만 입력하세요")
except BigNumberError as err:
    print("에러가 발생하였습니다. 한자리 숫자만 입력하세요") #이거 돌리면 이 프린트문이 찍힌다.
    print(err) #순서3. 처리될때 메시지 받아서 출력해줌
finally:
    print("계산기를 이용해 주셔서 감사합니다.")

#결과값
# 한 자리 숫자 나누기 전용 계산기 입니다.
# 첫 번째 숫자를 입력하세요 :10
# 두 번째 숫자를 입력하세요 :5
# 에러가 발생하였습니다. 한자리 숫자만 입력하세요
# 입력값 : 10, 5
# 계산기를 이용해 주셔서 감사합니다.

#사용자 정의 예외처리 (위의 한자리 숫자 나누기 계산기 이용해서 덧붙인다)

###finally 이거는 예외처리중 정상적이건 비정상적이건 무조건 수행되는거 try문 맨 끝에서 쓸수있다.
